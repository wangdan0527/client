{"ast":null,"code":"'use strict';\n\nimport \"core-js/modules/es.symbol\";\nimport \"core-js/modules/es.symbol.description\";\nimport \"core-js/modules/es.symbol.iterator\";\nimport \"core-js/modules/es.array.filter\";\nimport \"core-js/modules/es.array.for-each\";\nimport \"core-js/modules/es.array.iterator\";\nimport \"core-js/modules/es.array.join\";\nimport \"core-js/modules/es.array.reduce\";\nimport \"core-js/modules/es.function.name\";\nimport \"core-js/modules/es.object.assign\";\nimport \"core-js/modules/es.object.get-own-property-descriptor\";\nimport \"core-js/modules/es.object.get-own-property-descriptors\";\nimport \"core-js/modules/es.object.get-prototype-of\";\nimport \"core-js/modules/es.object.keys\";\nimport \"core-js/modules/es.object.to-string\";\nimport \"core-js/modules/es.reflect.construct\";\nimport \"core-js/modules/es.regexp.exec\";\nimport \"core-js/modules/es.regexp.to-string\";\nimport \"core-js/modules/es.string.iterator\";\nimport \"core-js/modules/es.string.replace\";\nimport \"core-js/modules/web.dom-collections.for-each\";\nimport \"core-js/modules/web.dom-collections.iterator\";\n\nfunction _typeof(obj) {\n  \"@babel/helpers - typeof\";\n\n  if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") {\n    _typeof = function _typeof(obj) {\n      return typeof obj;\n    };\n  } else {\n    _typeof = function _typeof(obj) {\n      return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj;\n    };\n  }\n\n  return _typeof(obj);\n}\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    if (enumerableOnly) symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    });\n    keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = arguments[i] != null ? arguments[i] : {};\n\n    if (i % 2) {\n      ownKeys(Object(source), true).forEach(function (key) {\n        _defineProperty(target, key, source[key]);\n      });\n    } else if (Object.getOwnPropertyDescriptors) {\n      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));\n    } else {\n      ownKeys(Object(source)).forEach(function (key) {\n        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n      });\n    }\n  }\n\n  return target;\n}\n\nfunction _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _defineProperties(target, props) {\n  for (var i = 0; i < props.length; i++) {\n    var descriptor = props[i];\n    descriptor.enumerable = descriptor.enumerable || false;\n    descriptor.configurable = true;\n    if (\"value\" in descriptor) descriptor.writable = true;\n    Object.defineProperty(target, descriptor.key, descriptor);\n  }\n}\n\nfunction _createClass(Constructor, protoProps, staticProps) {\n  if (protoProps) _defineProperties(Constructor.prototype, protoProps);\n  if (staticProps) _defineProperties(Constructor, staticProps);\n  return Constructor;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function\");\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) _setPrototypeOf(subClass, superClass);\n}\n\nfunction _setPrototypeOf(o, p) {\n  _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) {\n    o.__proto__ = p;\n    return o;\n  };\n\n  return _setPrototypeOf(o, p);\n}\n\nfunction _createSuper(Derived) {\n  var hasNativeReflectConstruct = _isNativeReflectConstruct();\n\n  return function () {\n    var Super = _getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = _getPrototypeOf(this).constructor;\n\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return _possibleConstructorReturn(this, result);\n  };\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) {\n    return call;\n  }\n\n  return _assertThisInitialized(self);\n}\n\nfunction _assertThisInitialized(self) {\n  if (self === void 0) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return self;\n}\n\nfunction _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Date.prototype.toString.call(Reflect.construct(Date, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}\n\nfunction _getPrototypeOf(o) {\n  _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) {\n    return o.__proto__ || Object.getPrototypeOf(o);\n  };\n  return _getPrototypeOf(o);\n}\n\nfunction _defineProperty(obj, key, value) {\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n\n  return obj;\n}\n\nimport React, { PureComponent } from 'react';\nimport PropTypes from 'prop-types';\nimport { Cache } from './cache';\nimport { withConfig, ConfigProvider } from './context';\nimport { getRandomColor, parseSize, setGroupedTimeout } from './utils';\nimport InternalState from './internal-state';\nexport { getRandomColor } from './utils';\nexport { ConfigProvider } from './context';\nexport { Cache } from './cache';\n\nfunction matchSource(Source, props, cb) {\n  var cache = props.cache;\n  var instance = new Source(props);\n  if (!instance.isCompatible(props)) return cb();\n  instance.get(function (state) {\n    var failedBefore = state && state.src && cache.hasSourceFailedBefore(state.src);\n\n    if (!failedBefore && state) {\n      cb(state);\n    } else {\n      cb();\n    }\n  });\n}\n\nexport default function createAvatarComponent(_ref) {\n  var _ref$sources = _ref.sources,\n      sources = _ref$sources === void 0 ? [] : _ref$sources; // Collect propTypes for each individual source\n\n  var sourcePropTypes = sources.reduce(function (r, s) {\n    return Object.assign(r, s.propTypes);\n  }, {});\n\n  var Avatar = /*#__PURE__*/function (_PureComponent) {\n    _inherits(Avatar, _PureComponent);\n\n    var _super = _createSuper(Avatar);\n\n    function Avatar(props) {\n      var _this;\n\n      _classCallCheck(this, Avatar);\n\n      _this = _super.call(this, props);\n\n      _defineProperty(_assertThisInitialized(_this), \"_createFetcher\", function (internal) {\n        return function (errEvent) {\n          var cache = _this.props.cache;\n          if (!internal.isActive(_this.state)) return; // Mark img source as failed for future reference\n\n          if (errEvent && errEvent.type === 'error') cache.sourceFailed(errEvent.target.src);\n          var pointer = internal.sourcePointer;\n          if (sources.length === pointer) return;\n          var source = sources[pointer];\n          internal.sourcePointer++;\n          matchSource(source, _this.props, function (nextState) {\n            if (!nextState) return setTimeout(internal.fetch, 0);\n            if (!internal.isActive(_this.state)) return; // Reset other values to prevent them from sticking (#51)\n\n            nextState = _objectSpread({\n              src: null,\n              value: null,\n              color: null\n            }, nextState);\n\n            _this.setState(function (state) {\n              // Internal state has been reset => we received new props\n              return internal.isActive(state) ? nextState : {};\n            });\n          });\n        };\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"fetch\", function () {\n        var internal = new InternalState();\n        internal.fetch = _this._createFetcher(internal);\n\n        _this.setState({\n          internal: internal\n        }, internal.fetch);\n      });\n\n      _defineProperty(_assertThisInitialized(_this), \"_scaleTextNode\", function (node) {\n        var retryTTL = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 16;\n        var _this$props = _this.props,\n            unstyled = _this$props.unstyled,\n            textSizeRatio = _this$props.textSizeRatio,\n            textMarginRatio = _this$props.textMarginRatio;\n        if (!node || unstyled || _this.state.src || !_this.mounted) return;\n        var spanNode = node.parentNode;\n        var tableNode = spanNode.parentNode;\n\n        var _spanNode$getBounding = spanNode.getBoundingClientRect(),\n            containerWidth = _spanNode$getBounding.width,\n            containerHeight = _spanNode$getBounding.height; // Whenever the avatar element is not visible due to some CSS\n        // (such as display: none) on any parent component we will check\n        // whether the component has become visible.\n        //\n        // The time between checks grows up to half a second in an attempt\n        // to reduce flicker / performance issues.\n\n\n        if (containerWidth == 0 && containerHeight == 0) {\n          var ttl = Math.min(retryTTL * 1.5, 500);\n          setGroupedTimeout(function () {\n            return _this._scaleTextNode(node, ttl);\n          }, ttl);\n          return;\n        } // If the tableNode (outer-container) does not have its fontSize set yet,\n        // we'll set it according to \"textSizeRatio\"\n\n\n        if (!tableNode.style.fontSize) {\n          var baseFontSize = containerHeight / textSizeRatio;\n          tableNode.style.fontSize = \"\".concat(baseFontSize, \"px\");\n        } // Reset font-size such that scaling works correctly (#133)\n\n\n        spanNode.style.fontSize = null; // Measure the actual width of the text after setting the container size\n\n        var _node$getBoundingClie = node.getBoundingClientRect(),\n            textWidth = _node$getBoundingClie.width;\n\n        if (textWidth < 0) return; // Calculate the maximum width for the text based on \"textMarginRatio\"\n\n        var maxTextWidth = containerWidth * (1 - 2 * textMarginRatio); // If the text is too wide, scale it down by (maxWidth / actualWidth)\n\n        if (textWidth > maxTextWidth) spanNode.style.fontSize = \"calc(1em * \".concat(maxTextWidth / textWidth, \")\");\n      });\n\n      _this.state = {\n        internal: null,\n        src: null,\n        value: null,\n        color: props.color\n      };\n      return _this;\n    }\n\n    _createClass(Avatar, [{\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        this.mounted = true;\n        this.fetch();\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        var needsUpdate = false; // This seems redundant\n        //\n        // Props that need to be in `state` are\n        // `value`, `src` and `color`\n\n        for (var prop in sourcePropTypes) {\n          needsUpdate = needsUpdate || prevProps[prop] !== this.props[prop];\n        }\n\n        if (needsUpdate) setTimeout(this.fetch, 0);\n      }\n    }, {\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this.mounted = false;\n\n        if (this.state.internal) {\n          this.state.internal.active = false;\n        }\n      }\n    }, {\n      key: \"_renderAsImage\",\n      value: function _renderAsImage() {\n        var _this$props2 = this.props,\n            className = _this$props2.className,\n            round = _this$props2.round,\n            unstyled = _this$props2.unstyled,\n            alt = _this$props2.alt,\n            title = _this$props2.title,\n            name = _this$props2.name,\n            value = _this$props2.value;\n        var internal = this.state.internal;\n        var size = parseSize(this.props.size);\n        var imageStyle = unstyled ? null : {\n          maxWidth: '100%',\n          width: size.str,\n          height: size.str,\n          borderRadius: round === true ? '100%' : round\n        };\n        return /*#__PURE__*/React.createElement(\"img\", {\n          className: className + ' sb-avatar__image',\n          width: size.str,\n          height: size.str,\n          style: imageStyle,\n          src: this.state.src,\n          alt: alt || name || value,\n          title: title || name || value,\n          onError: internal && internal.fetch\n        });\n      }\n    }, {\n      key: \"_renderAsText\",\n      value: function _renderAsText() {\n        var _this$props3 = this.props,\n            className = _this$props3.className,\n            round = _this$props3.round,\n            unstyled = _this$props3.unstyled,\n            title = _this$props3.title,\n            name = _this$props3.name,\n            value = _this$props3.value;\n        var size = parseSize(this.props.size);\n        var initialsStyle = unstyled ? null : {\n          width: size.str,\n          height: size.str,\n          lineHeight: 'initial',\n          textAlign: 'center',\n          color: this.props.fgColor,\n          background: this.state.color,\n          borderRadius: round === true ? '100%' : round\n        };\n        var tableStyle = unstyled ? null : {\n          display: 'table',\n          tableLayout: 'fixed',\n          width: '100%',\n          height: '100%'\n        };\n        var spanStyle = unstyled ? null : {\n          display: 'table-cell',\n          verticalAlign: 'middle',\n          fontSize: '100%',\n          whiteSpace: 'nowrap'\n        }; // Ensure the text node is updated and scaled when any of these\n        // values changed by calling the `_scaleTextNode` method using\n        // the correct `ref`.\n\n        var key = [this.state.value, this.props.size].join('');\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: className + ' sb-avatar__text',\n          style: initialsStyle,\n          title: title || name || value\n        }, /*#__PURE__*/React.createElement(\"div\", {\n          style: tableStyle\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          style: spanStyle\n        }, /*#__PURE__*/React.createElement(\"span\", {\n          ref: this._scaleTextNode,\n          key: key\n        }, this.state.value))));\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var _this$props4 = this.props,\n            className = _this$props4.className,\n            unstyled = _this$props4.unstyled,\n            round = _this$props4.round,\n            style = _this$props4.style,\n            onClick = _this$props4.onClick;\n        var _this$state = this.state,\n            src = _this$state.src,\n            sourceName = _this$state.sourceName;\n        var size = parseSize(this.props.size);\n        var hostStyle = unstyled ? null : _objectSpread({\n          display: 'inline-block',\n          verticalAlign: 'middle',\n          width: size.str,\n          height: size.str,\n          borderRadius: round === true ? '100%' : round,\n          fontFamily: 'Helvetica, Arial, sans-serif'\n        }, style);\n        var classNames = [className, 'sb-avatar'];\n\n        if (sourceName) {\n          var source = sourceName.toLowerCase().replace(/[^a-z0-9-]+/g, '-') // only allow alphanumeric\n          .replace(/^-+|-+$/g, ''); // trim `-`\n\n          classNames.push('sb-avatar--' + source);\n        }\n\n        return /*#__PURE__*/React.createElement(\"div\", {\n          className: classNames.join(' '),\n          onClick: onClick,\n          style: hostStyle\n        }, src ? this._renderAsImage() : this._renderAsText());\n      }\n    }]);\n\n    return Avatar;\n  }(PureComponent);\n\n  _defineProperty(Avatar, \"displayName\", 'Avatar');\n\n  _defineProperty(Avatar, \"propTypes\", _objectSpread(_objectSpread({}, sourcePropTypes), {}, {\n    alt: PropTypes.string,\n    title: PropTypes.string,\n    className: PropTypes.string,\n    fgColor: PropTypes.string,\n    color: PropTypes.string,\n    colors: PropTypes.arrayOf(PropTypes.string),\n    round: PropTypes.oneOfType([PropTypes.bool, PropTypes.string]),\n    style: PropTypes.object,\n    size: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    textSizeRatio: PropTypes.number,\n    textMarginRatio: PropTypes.number,\n    unstyled: PropTypes.bool,\n    cache: PropTypes.object,\n    onClick: PropTypes.func\n  }));\n\n  _defineProperty(Avatar, \"defaultProps\", {\n    className: '',\n    fgColor: '#FFF',\n    round: false,\n    size: 100,\n    textSizeRatio: 3,\n    textMarginRatio: .15,\n    unstyled: false\n  });\n\n  _defineProperty(Avatar, \"getRandomColor\", getRandomColor);\n\n  _defineProperty(Avatar, \"Cache\", Cache);\n\n  _defineProperty(Avatar, \"ConfigProvider\", ConfigProvider);\n\n  return Object.assign(withConfig(Avatar), {\n    getRandomColor: getRandomColor,\n    ConfigProvider: ConfigProvider,\n    Cache: Cache\n  });\n}","map":null,"metadata":{},"sourceType":"module"}