{"ast":null,"code":"import { action } from 'typesafe-actions';\nimport { RepositoriesTypes } from './types';\nexport const loadFilterRequest = () => action(RepositoriesTypes.LOAD_FILTER_REQUEST);\nexport const loadFilterSucess = data => action(RepositoriesTypes.LOAD_FILTER_SUCCESS, {\n  data\n});\nexport const loadFilterFailure = () => action(RepositoriesTypes.LOAD_FILTER_FAILURE);\nexport const loadJobsRequest = () => action(RepositoriesTypes.LOAD_JOB_REQUEST);\nexport const loadJobsSucess = data => action(RepositoriesTypes.LOAD_JOB_SUCCESS, {\n  data\n});\nexport const loadJobsFailure = () => action(RepositoriesTypes.LOAD_JOB_FAILURE);","map":{"version":3,"sources":["/Volumes/Data/Workspace/fullstack-candidate-testing/client/src/store/modules/repositories/actions.ts"],"names":["action","RepositoriesTypes","loadFilterRequest","LOAD_FILTER_REQUEST","loadFilterSucess","data","LOAD_FILTER_SUCCESS","loadFilterFailure","LOAD_FILTER_FAILURE","loadJobsRequest","LOAD_JOB_REQUEST","loadJobsSucess","LOAD_JOB_SUCCESS","loadJobsFailure","LOAD_JOB_FAILURE"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,iBAAT,QAA0C,SAA1C;AAEA,OAAO,MAAMC,iBAAiB,GAAG,MAAMF,MAAM,CAACC,iBAAiB,CAACE,mBAAnB,CAAtC;AACP,OAAO,MAAMC,gBAAgB,GAAIC,IAAD,IAAoBL,MAAM,CAACC,iBAAiB,CAACK,mBAAnB,EAAwC;AAAED,EAAAA;AAAF,CAAxC,CAAnD;AACP,OAAO,MAAME,iBAAiB,GAAG,MAAMP,MAAM,CAACC,iBAAiB,CAACO,mBAAnB,CAAtC;AAEP,OAAO,MAAMC,eAAe,GAAG,MAAMT,MAAM,CAACC,iBAAiB,CAACS,gBAAnB,CAApC;AACP,OAAO,MAAMC,cAAc,GAAIN,IAAD,IAAoBL,MAAM,CAACC,iBAAiB,CAACW,gBAAnB,EAAqC;AAAEP,EAAAA;AAAF,CAArC,CAAjD;AACP,OAAO,MAAMQ,eAAe,GAAG,MAAMb,MAAM,CAACC,iBAAiB,CAACa,gBAAnB,CAApC","sourcesContent":["import { action } from 'typesafe-actions';\nimport { RepositoriesTypes, Filter } from './types';\n\nexport const loadFilterRequest = () => action(RepositoriesTypes.LOAD_FILTER_REQUEST);\nexport const loadFilterSucess = (data: Filter[]) => action(RepositoriesTypes.LOAD_FILTER_SUCCESS, { data });\nexport const loadFilterFailure = () => action(RepositoriesTypes.LOAD_FILTER_FAILURE);\n\nexport const loadJobsRequest = () => action(RepositoriesTypes.LOAD_JOB_REQUEST);\nexport const loadJobsSucess = (data: Filter[]) => action(RepositoriesTypes.LOAD_JOB_SUCCESS, { data });\nexport const loadJobsFailure = () => action(RepositoriesTypes.LOAD_JOB_FAILURE);\n"]},"metadata":{},"sourceType":"module"}